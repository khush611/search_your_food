{"ast":null,"code":"'use strict';\n\nfunction round(method, number, precision) {\n  if (typeof number !== 'number') {\n    throw new TypeError('Expected value to be a number');\n  }\n\n  if (precision === Infinity) {\n    return number;\n  }\n\n  if (!Number.isInteger(precision)) {\n    throw new TypeError('Expected precision to be an integer');\n  }\n\n  const isRoundingAndNegative = method === 'round' && number < 0;\n\n  if (isRoundingAndNegative) {\n    number = Math.abs(number);\n  }\n\n  let exponent;\n  [number, exponent] = `${number}e`.split('e');\n  let result = Math[method](`${number}e${Number(exponent) + precision}`);\n  [number, exponent] = `${result}e`.split('e');\n  result = Number(`${number}e${Number(exponent) - precision}`);\n\n  if (isRoundingAndNegative) {\n    result = -result;\n  }\n\n  return result;\n}\n\nmodule.exports = round.bind(null, 'round');\nmodule.exports.up = round.bind(null, 'ceil');\nmodule.exports.down = round.bind(null, 'floor');","map":{"version":3,"sources":["C:/Users/KHUSBOO KUMARI/Documents/react_recipe/get-recipes/node_modules/round-to/index.js"],"names":["round","method","number","precision","TypeError","Infinity","Number","isInteger","isRoundingAndNegative","Math","abs","exponent","split","result","module","exports","bind","up","down"],"mappings":"AAAA;;AAEA,SAASA,KAAT,CAAeC,MAAf,EAAuBC,MAAvB,EAA+BC,SAA/B,EAA0C;AACzC,MAAI,OAAOD,MAAP,KAAkB,QAAtB,EAAgC;AAC/B,UAAM,IAAIE,SAAJ,CAAc,+BAAd,CAAN;AACA;;AAED,MAAID,SAAS,KAAKE,QAAlB,EAA4B;AAC3B,WAAOH,MAAP;AACA;;AAED,MAAI,CAACI,MAAM,CAACC,SAAP,CAAiBJ,SAAjB,CAAL,EAAkC;AACjC,UAAM,IAAIC,SAAJ,CAAc,qCAAd,CAAN;AACA;;AAED,QAAMI,qBAAqB,GAAGP,MAAM,KAAK,OAAX,IAAsBC,MAAM,GAAG,CAA7D;;AACA,MAAIM,qBAAJ,EAA2B;AAC1BN,IAAAA,MAAM,GAAGO,IAAI,CAACC,GAAL,CAASR,MAAT,CAAT;AACA;;AAED,MAAIS,QAAJ;AACA,GAACT,MAAD,EAASS,QAAT,IAAsB,GAAET,MAAO,GAAV,CAAaU,KAAb,CAAmB,GAAnB,CAArB;AACA,MAAIC,MAAM,GAAGJ,IAAI,CAACR,MAAD,CAAJ,CAAc,GAAEC,MAAO,IAAGI,MAAM,CAACK,QAAD,CAAN,GAAmBR,SAAU,EAAvD,CAAb;AAEA,GAACD,MAAD,EAASS,QAAT,IAAsB,GAAEE,MAAO,GAAV,CAAaD,KAAb,CAAmB,GAAnB,CAArB;AACAC,EAAAA,MAAM,GAAGP,MAAM,CAAE,GAAEJ,MAAO,IAAGI,MAAM,CAACK,QAAD,CAAN,GAAmBR,SAAU,EAA3C,CAAf;;AAEA,MAAIK,qBAAJ,EAA2B;AAC1BK,IAAAA,MAAM,GAAG,CAACA,MAAV;AACA;;AAED,SAAOA,MAAP;AACA;;AAEDC,MAAM,CAACC,OAAP,GAAiBf,KAAK,CAACgB,IAAN,CAAW,IAAX,EAAiB,OAAjB,CAAjB;AACAF,MAAM,CAACC,OAAP,CAAeE,EAAf,GAAoBjB,KAAK,CAACgB,IAAN,CAAW,IAAX,EAAiB,MAAjB,CAApB;AACAF,MAAM,CAACC,OAAP,CAAeG,IAAf,GAAsBlB,KAAK,CAACgB,IAAN,CAAW,IAAX,EAAiB,OAAjB,CAAtB","sourcesContent":["'use strict';\n\nfunction round(method, number, precision) {\n\tif (typeof number !== 'number') {\n\t\tthrow new TypeError('Expected value to be a number');\n\t}\n\n\tif (precision === Infinity) {\n\t\treturn number;\n\t}\n\n\tif (!Number.isInteger(precision)) {\n\t\tthrow new TypeError('Expected precision to be an integer');\n\t}\n\n\tconst isRoundingAndNegative = method === 'round' && number < 0;\n\tif (isRoundingAndNegative) {\n\t\tnumber = Math.abs(number);\n\t}\n\n\tlet exponent;\n\t[number, exponent] = `${number}e`.split('e');\n\tlet result = Math[method](`${number}e${Number(exponent) + precision}`);\n\n\t[number, exponent] = `${result}e`.split('e');\n\tresult = Number(`${number}e${Number(exponent) - precision}`);\n\n\tif (isRoundingAndNegative) {\n\t\tresult = -result;\n\t}\n\n\treturn result;\n}\n\nmodule.exports = round.bind(null, 'round');\nmodule.exports.up = round.bind(null, 'ceil');\nmodule.exports.down = round.bind(null, 'floor');\n"]},"metadata":{},"sourceType":"script"}